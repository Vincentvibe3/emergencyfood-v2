# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

jobs:
  - job: Build
    displayName: Build bot
    steps:
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: 'build'

      - task: CopyFiles@2
          displayName: 'Copy Files to artifact staging directory'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: '**/build/libs/*.?(war|jar)'
            TargetFolder: $(Build.ArtifactStagingDirectory)
      - upload: $(Build.ArtifactStagingDirectory)
        artifact: drop

  - deployment: VMDeploy
    displayName: Deploy emergencyfood-stable
    environment:
      name:  emergencyfood-stable
      resourceType: VirtualMachine
      tags: production
    strategy:
      runOnce:
        preDeploy:
          steps:
            - download: current
              artifact: drop

        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
        on:
          failure:
            steps:
              - script: echo 'failed deployment'
          success:
            steps:
              - script: echo 'deployment success'